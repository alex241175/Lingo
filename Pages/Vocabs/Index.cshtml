@page
@{
    ViewData["Title"] = "Vocab";
}
@using Lingo.Services
@inject Auth auth

<div id="app" class="row" v-cloak>
    <!-- Vocab list -->
     <div class="col-lg-10">
        <h3>Vocabulary List</h3>
        <div>
            <!-- filter -->
            <form class="form-inline my-4">
                <div class="form-group">
                    <button type="button" class="btn btn-primary" v-on:click="adding">Add</button>
                </div>
                <div class="form-group">
                    <label for="language" class="mx-2">Language</label>
                    <select id="language" class="form-control" v-model="filterLanguage" v-on:change="load(1)">
                        <option selected>Choose...</option>
                        <option>English</option>
                        <option>Malay</option>
                    </select>
                </div>
                <div class="form-group">
                <label for="category" class="mx-2">Category</label>
                    <select id="category" class="form-control" v-model="filterCategory" v-on:change="load(1)">
                        <option selected>User</option>
                        <option>1000</option>
                        <option>3000</option>
                        <option>6000</option>
                    </select>
                </div>
                <div class="form-group">
                    <button type="button" class="btn btn-outline-secondary ml-4" v-on:click="toggleAllChinese">〇 Chinese</button>
                    <button type="button" class="btn btn-outline-secondary ml-2" v-on:click="goMCQ">> MCQ</button>
                    <button type="button" class="btn btn-outline-secondary ml-2" v-on:click="goMatch">> Match</button>                        
                </div>
            </form>
            <partial name="_PaginationVue" />            
            <div v-if="vocabs.length == 0" class="alert alert-info" role="alert">No vocab found!</div>
            <div v-else>
                <!-- header row -->
                <div class="row">
                    <div class="col-1 vocab-header">No</div>
                    <div class="col-4 vocab-header">Text</div>
                    <div class="col-4 vocab-header">Chinese</div>
                    <div class="col-3 vocab-header"></div>
                </div>
                <div class="row" v-for="(v, index) in vocabs" :key="v.vocabId">
                    <div class="col-1 vocab-item">{{ index + 1 }}</div>
                    <div class="col-4 vocab-item">
                        <span v-text="v.text"></span>
                        <span class="pull-right">
                            <i v-if="!v.showNote" class="fa fa-angle-right fa-lg hand"  v-on:click="toggleNote(v, index)"></i>
                            <i v-if="v.showNote" class="fa fa-angle-down fa-lg hand"  v-on:click="toggleNote(v, index)"></i>
                        </span>
                    </div>
                    <div class="col-4 vocab-item hand" v-on:click="v.showChinese = !v.showChinese">
                        <span v-if="v.showChinese" v-text="v.chinese"></span>
                    </div>
                    <div class="col-3 vocab-item">
                        <button v-if="v.isReview" class="btn" v-on:click="unreview(v.reviewId,index)" data-toggle="tooltip" data-placement="bottom" title="clear review"><i class="fa fa-bookmark fa-lg"></i></button>
                        <button v-if="!v.isReview" class="btn" v-on:click="review(v.vocabId,index)" data-toggle="tooltip" data-placement="bottom" title="set review"><i class="fa fa-bookmark-o fa-lg"></i></button>
                        <button class="btn" v-on:click="updating(v)"><i class="fa fa-edit fa-lg"></i></button>
                        <button class="btn" v-on:click="remove(v.vocabId)"><i class="fa fa-trash-o fa-lg"></i></button>
                    </div>
                    <div v-bind:id="'collapse-'+ index" class="collapse col-12 mb-4" style="background-color:lightyellow;">
                        <div class="card-body" v-html="v.note"></div>
                    </div>              
                </div>
            </div>
        </div>       
    </div> <!-- vocab list -->
    <!-- modal -->
    <div class="modal fade" id="modal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" data-keyboard="false" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">{{ vocab.vocabId ? 'Update Vocab (' + vocab.vocabId + ')': 'New Vocab'}}</h5>
                    <div v-if="vocab.vocabId">
                        <button class="btn btn-light ml-4" v-on:click="changeNew">New Vocab</button>
                        <button v-if="isThisReview" class="btn" v-on:click="unreview(vocab.vocabId,-1)"><i class="fa fa-bookmark fa-lg"></i></button>
                        <button v-if="!isThisReview" class="btn" v-on:click="review(vocab.vocabId,-1)"><i class="fa fa-bookmark-o fa-lg"></i></button>
                    </div>
                    <button type="button" class="close" aria-label="Close" data-dismiss="modal">
                    <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form>
                         <div class="form-group">
                            <label for="text" class="col-form-label">Language:</label>                            
                            <div class="form-check-inline">
                                <label class="form-check-label">
                                    <input type="radio" class="form-check-input" v-model="vocab.language" value="English">English
                                </label>
                            </div>
                            <div class="form-check-inline">
                                <label class="form-check-label">
                                    <input type="radio" class="form-check-input" v-model="vocab.language" value="Malay">Malay
                                </label>
                            </div>
                         </div>
                        <div class="form-group">
                            <label for="text" class="col-form-label">Text:</label>
                            <input type="text" class="form-control" id="text" v-model="vocab.text" autocomplete="off">
                            <button type="button" class="btn btn-primary mt-2 mx-2" v-on:click="translate"><u>G</u>oogle Translate</button>
                            <button type="button" v-if="vocab.language == 'English'" class="btn btn-primary mt-2 mx-2" v-on:click="dict">海词词典</button>
                        </div>
                        <div class="form-group">
                            <label for="chinese" class="col-form-label">Chinese:</label>
                            <input type="text" class="form-control" id="chinese" v-model="vocab.chinese" autocomplete="off">
                        </div>
                        <div class="form-group">
                            <label for="note" class="col-form-label">Note:</label>
                            <div v-if="!editNote" class="hand" v-on:click="editNote = true" v-html="vocab.note"></div>
                            <textarea v-if="editNote" v-on:blur="editeNote == false" rows="5" type="text" class="form-control" id="note" v-model="vocab.note" autocomplete="off"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <div v-if="!vocab.vocabId">
                        <input type="checkbox" v-model="addToReview">
                        <label>Add to Review</label>
                    </div>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" v-on:click="upsert"><u>S</u>ave</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{ 
    <script>
        // has to embed vue.js in this razor page. If linked to external js, cannot insert value from view model
        const app =  new Vue({
            el: '#app',
            data() {
            return {
                //in vue.js, all properties must start with small letter
                filterLanguage:'English',
                filterCategory:'User',
                currentLanguage:'Choose...',
                showAllChinese: true,
                addToReview: true,
                isThisReview: false,
                editNote: false,
                checkedVs:[],
                vocabs:[],
                vocab:{
                    language: '',
                    text:'',
                    chinese:'',
                    note:'',
                    essayId: '',
                    category:'',
                    userId:null,
                },
                defaultVocab:{
                    language: '',
                    text:'',
                    chinese:'',
                    note:'',
                    essayId: null,
                    category:'User',
                    userId:@auth.UserId,
                },
                pageSize: 20,
                currentPage : 1,
                goToPage:'',
                pageRangeSize: 2,
                count: 0,
            }
            },
            created(){
                this.load(1)
            },
            mounted() {
                this._keyListener = function(e) {
                    if (e.key === "s" && (e.ctrlKey || e.metaKey)) {
                        e.preventDefault(); // present "Save Page" from getting triggered.
                        this.upsert();
                    }
                    if (e.key === "g" && (e.ctrlKey || e.metaKey)) {
                        e.preventDefault(); // present "Save Page" from getting triggered.
                        this.translate();
                    }
                    //if (e.keyCode == 27){   not working
                    if (e.key === "Escape" || e.key === "Esc"){
                        e.preventDefault(); // present "Save Page" from getting triggered.
                        this.changeNew()
                    }
                };
                document.addEventListener('keydown', this._keyListener.bind(this));
            },
            computed:{
                totalPages(){
                    return Math.ceil(this.count/this.pageSize)
                },
                showPrevious(){
                    return this.currentPage > 1
                },
                showNext(){
                    return this.currentPage < this.totalPages
                },
                showFirst(){
                    return this.currentPage != 1
                },
                showLast(){
                    return this.currentPage != this.totalPages
                },
                pageRange(){
                    const initialNum = this.currentPage - this.pageRangeSize
                    const limitNum =  (this.currentPage + this.pageRangeSize )  + 1
                    var arr = [];
                    for (var i = initialNum; i < limitNum; i++) {
                        arr.push(i);
                    } 
                    return arr
                }
            },
            methods:{
                load(currentPage){
                    if (this.currentLanguage != this.filterLanguage){ // switching to new language
                        this.currentPage = 1
                        this.currentLanguage = this.filterLanguage
                    }else{
                        this.currentPage = parseInt(currentPage)
                    }
                    const language = this.currentLanguage == "Choose..." ? "" : this.currentLanguage 
                    const category = this.filterCategory
                    fetch(`./api/vocab/?Language=${language}&Category=${category}&CurrentPage=${this.currentPage}&PageSize=${this.pageSize}&UserId=@auth.UserId`)
                    .then(response => response.json())
                    .then(response => {
                        var vocabs = response.data.map(item => {
                            return {
                                ...item,
                                showChinese: true,
                                showNote: false,
                            }
                        })                        
                        this.vocabs = vocabs
                        this.count = response.count
                        this.goToPage = ''
                    })
                },
                goMCQ(){
                    const language = this.currentLanguage == "Choose..." ? "" : this.currentLanguage 
                    const category = this.filterCategory
                    location.href= `./Vocabs/mcq/?Language=${language}&Category=${category}&CurrentPage=${this.currentPage}&PageSize=${this.pageSize}`                  
                },
                goMatch(){
                    const language = this.currentLanguage == "Choose..." ? "" : this.currentLanguage 
                    const category = this.filterCategory
                    location.href= `./Vocabs/match/?Language=${language}&Category=${category}&CurrentPage=${this.currentPage}&PageSize=${this.pageSize}`                  
                },
                toggleAllChinese(){
                    this.showAllChinese = !this.showAllChinese
                    this.vocabs.forEach(
                        v => v.showChinese = this.showAllChinese
                    )
                },
                toggleNote(v, index){
                    v.showNote = !v.showNote
                    let note = $('#collapse-'+index).children(":first").html()
                    if (note == '' && v.language == "English"){  //if note is empty
                        toastr.options = { timeOut: "2000",}
                        toastr.info('Looking up Note')
                        const sourceText = v.text                    
                        fetch(`../../api/vocab/dict/${sourceText}`)
                        .then(response => response.json())
                        .then(response => {
                            const result = response.e + '<br>' + response.s  + '<br>' + response.t                    
                            $('#collapse-'+index).children(":first").html(result)
                            app.vocabs[index].note = result
                            // save to database
                            const vocab = {
                                VocabId: v.vocabId,
                                Language: v.language,
                                Text:v.text,
                                Chinese:v.chinese,
                                Note:result,
                                EssayId: v.essayId,
                                Category:v.category,
                                UserId:v.userId,
                            }

                            fetch('./api/vocab',{
                                method: 'PUT', 
                                headers: {
                                'Content-Type': 'application/json',
                                },
                                body: JSON.stringify(vocab),
                            })
                            .then(response => {
                                // toggle
                                $('#collapse-'+index).collapse('toggle')
                            })
                        })
                    }else{
                        $('#collapse-'+index).collapse('toggle')
                    }

                },
                adding(){
                    this.vocab = {...this.defaultVocab}
                    this.vocab.language = this.filterLanguage
                    this.isThisReview = false
                    //this.addToReview = true
                    $('#modal').modal('show')
                    // $('#text').focus()  // not working
                },
                changeNew(){
                    //const text = this.vocab.text
                    this.vocab = {...this.defaultVocab}
                    //this.vocab.text = text
                    this.vocab.language = this.filterLanguage
                    $('#text').focus() 
                },
                updating(v){
                    this.vocab = {...v}
                    this.editNote = false
                    this.isThisReview = v.isReview
                    this.addToReview = false
                    $('#modal').modal('show')
                },
                upsert(){
                    let operation = 'POST'
                    // first letter convert to capital letter
                    const vocab = {
                        Language: this.vocab.language,
                        Text:this.vocab.text.trim(),
                        Chinese:this.vocab.chinese.trim(),
                        Note:this.vocab.note,                
                        EssayId: this.vocab.essayId,
                        Category:this.vocab.category,
                        UserId:this.vocab.userId,
                    }
                    if (this.vocab.vocabId){
                        vocab.VocabId = this.vocab.vocabId
                        operation = 'PUT'
                    }
                    fetch('./api/vocab',{
                        method: operation, 
                        headers: {
                        'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(vocab),
                    })
                    .then(response => response.json())
                    .then(response => {
                        this.vocab = {...this.defaultVocab}
                        this.isThisReview = false
                        this.vocab.language = this.filterLanguage
                        if(operation == "POST"){   // add new
                            this.load(this.totalPages) // reload last page
                        }else{  // update
                            this.load(this.currentPage)
                        }
                        $('#text').focus()

                        // add to review if yes
                        if (this.addToReview){
                            this.review(response.vocabId, -1) 
                        }
                        // $('#modal').modal('hide')
                    })
                },
                remove(vocabId){                    
                    // remove vocab in db
                    fetch('./api/vocab/'+vocabId,{ method:'delete'})
                    .then(response => response.json())
                    .then(response => {
                        toastr.options = {
                            timeOut: "2000",
                        }
                        toastr.info('Deleted')
                        this.load(this.currentPage)
                    })
                },

                translate(){
                    const sourceText = this.vocab.text
                    let sourceLanguage = ''
                    if(this.vocab.language == "English") sourceLanguage = "en"
                    if(this.vocab.language == "Malay") sourceLanguage = "ms"
                    fetch(`./api/vocab/translate/${sourceLanguage}/${sourceText}`)
                    .then(response => response.json())
                    .then(response => {
                        const obj = JSON.parse(response);
                        const result = obj.data.translations[0].translatedText
                        this.vocab.chinese = result                        
                    })
                },
                dict(){
                    // for English word only
                    const sourceText = this.vocab.text                    
                    fetch(`../../api/vocab/dict/${sourceText}`)
                    .then(response => response.json())
                    .then(response => {
                        this.vocab.note = response.e + '<br>' + response.s  + '<br>' + response.t                    
                    })
                },
                review(vocabId, index){
                    const review = {
                        VocabId: vocabId,
                        UserId:@auth.UserId,
                        Passed: 0,
                    }
                    fetch('./api/review',{
                        method: 'POST', 
                        headers: {
                        'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(review),
                    })
                    .then(response => response.json())
                    .then(response => {
                        if (index == -1){  // from modal 
                            this.isThisReview = true
                        }else{
                            this.vocabs[index].isReview = true
                        }
                    })
                },
                unreview(reviewId, index){
                     fetch('./api/review/' + reviewId,{
                        method: 'DELETE',        
                    })
                    .then(response => {
                        if (index == -1){  // from modal 
                            this.isThisReview = false
                        }else{
                            this.vocabs[index].isReview = false
                        }
                    })          
                },
            }
        })

        var $input = $("#text");
        $input.typeahead({
            source: function (query, process) {
                $.get(`./api/vocab/typeahead`, {
                     Text : query,
                     Language : app.vocab.language,
                     UserId :15
                    }, function(data, status)
                    {
                        //console.log(data);
                        return process(data);
                    });
            },
            autoSelect: true,
            minLength: 2,
            items:8,
            afterSelect: function (data) {
                //print the id to developer tool's console
                $.get(`./api/vocab/id/${data.id}`, function(data, status)
                {
                    app.vocab = data
                    app.editNote = false
                    app.isThisReview = app.vocab.isReview
                    delete app.vocab.isReview
                });
            }
     
        });

        $('#modal').on('shown.bs.modal', function () {
            if (!app.vocab.vocabId){   // adding vocab mode
                $('#text').focus()
            }
        })

        // initialize tooltips everywhere
        $(function () {
            $('[data-toggle="tooltip"]').tooltip()
        })

    </script>
}



