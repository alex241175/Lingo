@page "{essayId}"
@model Lingo.Pages.Essays.DetailsModel
@using Lingo.Services
@inject Auth auth

<div id="app" class="row">
    <!-- Essay -->
    <div class="col-6">
        @if (Model.Essay != null)
        {
            <div class="row">
                <a class="btn btn-primary" asp-page="./Edit" asp-route-essayId="@Model.Essay.EssayId">Edit</a>
                <form asp-page-handler="delete" asp-route-essayId="@Model.Essay.EssayId" method="post">
                    <button class="btn btn-danger">Delete</button>
                </form>
            </div>  
        }
        <h3 class="mt-3">@Model.Essay.Title</h3> 
        <div>
            <span>@Model.Essay.EssayId</span> |
            <span>@Model.Essay.Category</span> |
            <span>@Model.Essay.Language</span> |
            <span>@Model.Essay.Source</span> |
            <span>@Model.Essay.Created.ToString("dd MMM yyyy")</span>
        </div>
        <div class="border mt-2 p-2" id="text" v-on:mouseUp="addingVocabFromEssay">
           <span>@Html.Raw(@Model.Essay.Text)</span>
        </div>

    </div>
    <!-- Vocab list -->
     <div class="col-6">
        <h1>Vocabulary List</h1>
        <div>
            <div class="mb-2">
                <button type="button" class="btn btn-primary" v-on:click="addingVocabFromEssay">Add</button>
                <small class="text-muted">double click or select the word in essay to add vocab</small>
            </div>
            <div v-if="vocabs.length == 0" class="alert alert-info" role="alert">No vocab found!</div>
            <div class="row" v-for="(v, index) in vocabs" :key="v.vocabId">
                <div class="col-1 vocab-item" v-text="'(' + ( index + 1 ) + ')'"></div>
                <div class="col-4 vocab-item hand" v-text="v.text" data-toggle="collapse" v-bind:data-target="'#collapse' + index" ></div>
                <div class="col-3 vocab-item" v-text="v.chinese"></div>
                <div class="col-3 vocab-item row">
                    <button class="btn" v-on:click="updating(v)"><i class="fa fa-edit fa-lg"></i></button>
                    <button class="btn" v-on:click="remove(index, v)"><i class="fa fa-trash-o fa-lg"></i></button>
                </div>
                <div v-bind:id="'collapse'+ index" class="collapse col-12 mb-4" style="background-color:lightyellow;">
                    <div class="card-body" v-html="v.note"></div>
                </div>       
            </div>
        </div>       
    </div> <!-- vocab list -->
    <!-- modal -->
    <div class="modal fade" id="modal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">{{ vocab.vocabId ? 'Update Vocab (' + vocab.vocabId + ')' : 'New Vocab'}}</h5>
                    <div v-if="vocab.vocabId">
                        <button v-if="isThisReview" class="btn" v-on:click="unreview(vocab.vocabId)"><i class="fa fa-bookmark fa-lg"></i></button>
                        <button v-if="!isThisReview" class="btn" v-on:click="review(vocab.vocabId)"><i class="fa fa-bookmark-o fa-lg"></i></button>
                    </div>
                    <button type="button" class="close" aria-label="Close" v-on:click="cancelAddingVocabFromEssay">
                    <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="text" class="col-form-label">Text:</label>
                            <input type="text" class="form-control" id="text" v-model="vocab.text">
                            <button type="button" class="btn btn-primary mt-2 mx-2" v-on:click="translate">Google Translate</button>
                            <button v-if="vocab.language == 'English'" type="button" class="btn btn-primary mt-2 mx-2" v-on:click="dict">海词词典</button>
                        </div>
                        <div class="form-group">
                            <label for="chinese" class="col-form-label">Chinese:</label>
                            <input type="text" class="form-control" id="chinese" v-model="vocab.chinese">
                        </div>
                        <div class="form-group">
                            <label for="note" class="col-form-label">Note:</label>
                            <div v-if="!editNote" class="hand" v-on:click="editNote = true" v-html="vocab.note"></div>
                            <textarea v-if="editNote" v-on:blur="editeNote == false" rows="5" type="text" class="form-control" id="note" v-model="vocab.note" autocomplete="off"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <div v-if="!vocab.vocabId">
                        <input type="checkbox" v-model="addToReview">
                        <label>Add to Review</label>
                    </div>
                    <button type="button" class="btn btn-secondary" v-on:click="cancelAddingVocabFromEssay">Close</button>
                    <button type="button" class="btn btn-primary" v-on:click="upsert">Send</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{ 
    <script>
        // has to embed vue.js in this view model. If linked to external js, cannot insert value from view model
        const app =  new Vue({
            el: '#app',
            data() {
            return {
                //in vue.js, all properties must start with small letter
                vocabs:[],
                isSaveEssay:false,
                editNote: false,
                addToReview: false,
                isThisReview: false,
                vocab:{
                    language: '',
                    text:'',
                    chinese:'',
                    note:'',
                    essayIds: '',
                    category:'',
                    userId:null,  
                },
                defaultVocab:{
                    language: '@Model.Essay.Language',
                    text:'',
                    chinese:'',
                    note:'',
                    essayIds: '@Model.Essay.EssayId',
                    category:'User',
                    userId:@auth.UserId,
                },
            }
            },
            created(){
                this.loadVocabList()
            },
            methods:{
                loadVocabList(){
                    fetch('../../api/vocab/essay/@Model.Essay.EssayId')
                        .then(response => response.json())
                        .then(response => {
                            this.vocabs = response.data
                            // convert to empty array if null
                            this.syncVocabIndex()
                        })
                        // ajax not working           
                },
                loadEssayText(){
                    fetch('../../api/essay/@Model.Essay.EssayId')
                        .then(response => response.json())
                        .then(response => {
                            $('#text').html(response.text)
                        })
                },
                adding(){
                    this.vocab = {...this.defaultVocab}
                    this.editNote = false
                    $('#modal').modal('show')
                },
                updating(v){
                    this.vocab = {...v}
                    $('#modal').modal('show')
                },
                upsert(){
                    let operation = 'POST'
                    // first letter convert to capital letter
                    //add this Essayids array

                    const vocab = {
                        Language: this.vocab.language,
                        Text:this.vocab.text,
                        Chinese:this.vocab.chinese,
                        Note:this.vocab.note,                
                        EssayIds: this.vocab.essayIds,
                        Category:this.vocab.category,
                        UserId:this.vocab.userId,
                    }
                    if (this.vocab.vocabId){   // updating
                        vocab.VocabId = this.vocab.vocabId
                        vocab.EssayIds = this.vocab.essayIds + ',' + '@Model.Essay.EssayId'
                        operation = 'PUT'
                    }
                    fetch('../../api/vocab',{
                        method: operation, 
                        headers: {
                        'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(vocab),
                    })
                    .then(response => response.json())
                    .then(response => {
                        this.vocab = {...this.defaultVocab}
                        this.loadVocabList()
                         $('#modal').modal('hide')
                        // update Essay if vocab is from  Essay
                        if (this.isSaveEssay){                            
                            this.saveEssay()                        
                        }
                    })
                },
                remove(index, v){
                    // remove highlighted vocab in essay
                    $('.index').each(function() {
                        if ($(this).html() == index + 1){
                            $(this).parent().replaceWith(v.text)
                        }
                    })
                    //refresh all index
                    let n = 1
                    $('.index').each(function() {
                        $(this).html(n)
                        n++                        
                    })
                    //save essay to db
                    this.saveEssay()
                    
                    // update vocab in db
                    const essayId = '@Model.Essay.EssayId'
                    let essayIds = v.essayIds.split(',')
                    if (essayIds.length > 1){
                        const i = essayIds.indexOf(essayId)
                        essayIds.splice(i,1)
                        v.essayIds = essayIds.join()             
                    }else{
                        v.essayIds = ''
                    }
                     fetch('../../api/vocab',{
                        method: 'PUT', 
                        headers: {
                        'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(v),
                    })
                    .then(response => response.json())
                    .then(response => {
                        this.loadVocabList()
                        toastr.options = {
                            timeOut: "1000",
                        }
                        toastr.success('Deleted')
                    })
                },
                saveEssay(){
                    // update Essay API
                    this.isSaveEssay = false
                    fetch('../../api/essay/@Model.Essay.EssayId',{
                        method: 'PUT', 
                        headers: {
                        'Content-Type': 'application/json',
                        },
                        body: JSON.stringify($('#text').html())
                    })    
                },

                cancelAddingVocabFromEssay(){
                    this.loadEssayText()
                    this.vocab = {...this.defaultVocab}
                    $('#modal').modal('hide')
                },

                addingVocabFromEssay(){
                    const selection = window.getSelection().toString().trim()
                    if (selection){  
                        // number and bold the selected text
                        insertSurroundingTagAtSelection()
                        //this.lastIndex++

                        //refresh all index
                        let n = 1
                        $('.index').each(function() {
                            $(this).html(n)
                            n++                        
                        })
                        //clear selection in essay
                        window.getSelection().empty() 
                        this.isSaveEssay = true

                        //lookup in vocab table
                        $.get(`../../api/vocab/text/${selection}`, function(data, status, xhr)
                        {                            
                            if (xhr.status == 200){
                                app.vocab = data
                                app.editNote = false
                                app.isThisReview = app.vocab.isReview
                                delete app.vocab.isReview
                            } else if (xhr.status == 204){   // no response
                                app.vocab = {...app.defaultVocab}
                                app.vocab.text = selection
                            }
                            $('#modal').modal('show')
                         });
                    }else{

                        // alert("Please select a vocab first")
                    }
                },

                syncVocabIndex(){ 
                    $('.index').each(function() {
                        const index = $(this).html()
                        const vocab = $(this).siblings().html()
                        // assign index from Essay to Vocab List
                        app.vocabs.map((v) =>{                            
                            if (v.text == vocab){
                                v.sn = index
                            }
                            return v
                        })                        
                    })
                    // sort by sn
                    this.vocabs.sort((a, b) => a.sn -  b.sn) 
                },

                translate(){
                    const sourceText = this.vocab.text
                    const language = '@Model.Essay.Language'
                    let sourceLanguage = ''
                    if(language == "English") sourceLanguage = "en"
                    if(language == "Malay") sourceLanguage = "ms"
                    fetch(`../../api/vocab/translate/${sourceLanguage}/${sourceText}`)
                    .then(response => response.json())
                    .then(response => {
                        const obj = JSON.parse(response);
                        const result = obj.data.translations[0].translatedText
                        this.vocab.chinese = result                        
                    })
                },

                dict(){
                    // for English word only
                    const sourceText = this.vocab.text                    
                    fetch(`../../api/vocab/dict/${sourceText}`)
                    .then(response => response.json())
                    .then(response => {
                        this.vocab.note = response.e + '<br>' + response.s  + '<br>' + response.t                    
                    })
                },
                review(vocabId){
                    const review = {
                        VocabId: vocabId,
                        UserId:@auth.UserId,
                    }
                    fetch('../../api/review',{
                        method: 'POST', 
                        headers: {
                        'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(review),
                    })
                    .then(response => {
                        this.isThisReview = true    
                    })
                },
                unreview(reviewId){
                    fetch('./api/review/' + reviewId,{
                        method: 'DELETE',        
                    })
                    .then(response => {
                        this.isThisReview = false
                    })          
                },
            }
        })
    </script>
}


