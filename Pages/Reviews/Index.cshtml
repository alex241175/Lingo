@page
@{
    ViewData["Title"] = "Review Vocab";
}
@using Lingo.Services
@inject Auth auth

<div id="app" class="row" v-cloak>
    <!-- Review Vocab list -->
     <div class="col-lg-10">
        <h3>Review Vocabulary List</h3>
        <div>
            <!-- filter -->
            <form class="form-inline my-4">
                <div class="form-group">
                    <label for="language" class="mx-2">Language</label>
                    <select id="language" class="form-control" v-model="filterLanguage" v-on:change="load(1)">
                        <option selected>Choose...</option>
                        <option>English</option>
                        <option>Malay</option>
                    </select>
                </div>
                <div class="form-group">
                    <button type="button" class="btn btn-outline-secondary ml-4" v-on:click="refresh">Refresh</button>
                    <button type="button" class="btn btn-outline-secondary ml-2" v-on:click="toggleAllChinese">Chinese</button>
                    <button type="button" class="btn btn-outline-secondary ml-2" v-on:click="goMCQ">MCQ</button>
                    <button type="button" class="btn btn-outline-secondary ml-2" v-on:click="goMatch">Match</button>  
                    <button type="button" class="btn btn-light btn-sm mx-2" v-on:click="selectMode = !selectMode">Select</button>
                    <div v-if="selectMode" class="ml-4">
                        <button type="button" class="btn btn-light btn-sm ml-2" v-on:click="unreviewSelected">Clear Review</button>
                    </div>
                   <button type="button" class="btn"  v-on:click="openSettingDialog"><i class="fa fa-cog fa-lg"></i></button>  
                </div>
            </form>
            <partial name="_PaginationVue" />            
            <div v-if="vocabs.length == 0" class="alert alert-info" role="alert">No vocab found!</div>
            <div v-else>
                <!-- header row -->
                <div class="row">
                    <div class="col-1 vocab-header" v-if="selectMode"><input type="checkbox" v-model="allSelected" v-on:click="toggleSelectAll"></div>                    
                    <div class="col-1 vocab-header">No</div>
                    <div class="col-3 vocab-header">Text</div>
                    <div class="col-3 vocab-header">Chinese</div>
                    <div class="col-3 vocab-header"></div>
                </div>
                <div class="row" v-for="(v, index) in vocabs" :key="v.vocabId">
                    <div class="col-1 vocab-item" v-if="selectMode">
                        <input class="checkbox" type="checkbox" v-bind:value="v.reviewId" v-model="selectedReviewIds">
                    </div>
                    <div class="col-1 vocab-item">{{ index + 1 }}</div>
                    <div class="col-4 vocab-item">
                        <span v-text="v.text"></span>
                        <span class="pull-right">
                            <i v-if="!v.showNote" class="fa fa-angle-right fa-lg hand"  v-on:click="toggleNote(v, index)"></i>
                            <i v-if="v.showNote" class="fa fa-angle-down fa-lg hand"  v-on:click="toggleNote(v, index)"></i>
                        </span>
                    </div>
                    <div class="col-3 vocab-item hand" v-on:click="v.showChinese = !v.showChinese"><span v-if="v.showChinese" v-text="v.chinese"></span></div>
                    <div class="col-3 vocab-item">
                        @* <button v-if="v.isReview" class="btn" v-on:click="unreview(v.reviewId)"><i class="fa fa-bookmark fa-lg"></i></button> *@
                        <button class="btn" v-on:click="updating(v)"><i class="fa fa-edit fa-lg"></i></button>
                    </div>
                    <div v-bind:id="'collapse-'+ index" class="collapse col-12 mb-4" style="background-color:lightyellow;">
                        <div class="card-body" v-html="v.note"></div>
                    </div>              
                </div>
            </div>
        </div>       
    </div> <!-- vocab list -->
    <!-- modal vocab -->
    <partial name="_VocabDialog" />
    <!-- modal setting -->
    <partial name="_SettingDialog" />  
</div>

@section Scripts{ 
    <script>
        // has to embed vue.js in this razor page. If linked to external js, cannot insert value from view model
        const app =  new Vue({
            el: '#app',
            data() {
            return {
                //in vue.js, all properties must start with small letter
                position: '',
                filterLanguage:'English',
                currentLanguage:'Choose...',
                showAllChinese: true,
                selectMode: false,
                isThisReview: false,
                editNote: false,
                selectedReviewIds: [],
                allSelected: false,
                vocabs:[],
                vocab:{
                    language: '',
                    text:'',
                    chinese:'',
                    note:'',
                    essayId: '',
                    category:'',
                    userId:null,
                },
                defaultVocab:{
                    language: '',
                    text:'',
                    chinese:'',
                    note:'',
                    essayId: null,
                    category:'User',
                    userId:@auth.UserId,
                },
                pageSize: 20,
                currentPage : 1,
                goToPage:'',
                pageRangeSize: 2,
                count: 0,
                reviewSetting:{
                    reviewSettingId:0,
                    language : '',
                    lastVocabId : 0,
                    vocabsPerDay : 0,
                    passedThreshold : 0,
                    vocabsCategory: ''
                },
            }
            },
            created(){
                this.refresh()
            },
            computed:{
                totalPages(){
                    return Math.ceil(this.count/this.pageSize)
                },
                showPrevious(){
                    return this.currentPage > 1
                },
                showNext(){
                    return this.currentPage < this.totalPages
                },
                showFirst(){
                    return this.currentPage != 1
                },
                showLast(){
                    return this.currentPage != this.totalPages
                },
                pageRange(){
                    const initialNum = this.currentPage - this.pageRangeSize
                    const limitNum =  (this.currentPage + this.pageRangeSize )  + 1
                    var arr = [];
                    for (var i = initialNum; i < limitNum; i++) {
                        arr.push(i);
                    } 
                    return arr
                }
            },
            methods:{
                load(currentPage){
                    if (this.currentLanguage != this.filterLanguage){ // switching to new language
                        this.currentPage = 1
                        this.currentLanguage = this.filterLanguage
                    }else{
                        this.currentPage = parseInt(currentPage)
                    }
                    const language = this.currentLanguage == "Choose..." ? "" : this.currentLanguage 
                    const category = this.filterCategory
                    fetch(`../../api/review?Language=${language}&CurrentPage=${this.currentPage}&PageSize=${this.pageSize}&UserId=@auth.UserId`)
                    .then(response => response.json())
                    .then(response => {
                        var vocabs = response.data.map(item => {
                            return {
                                ...item,
                                showChinese: true,
                                showNote: false,
                            }
                        })                        
                        this.vocabs = vocabs
                        this.count = response.count
                        this.position = response.position
                        this.goToPage = ''
                    })
                },

                //initialize review vocab set for the day
                refresh(){
                    fetch(`../../api/review/refresh?Language=${this.filterLanguage}`)
                    .then(response => response.json())
                    .then(response => {
                        const newVocabsCount  = response.data
                        if (newVocabsCount > 0){
                            toastr.options = { timeOut: "2000", positionClass: "toast-bottom-right"}
                            toastr.info('New vocabs added for review : ' + newVocabsCount)
                        }else {
                            toastr.options = { timeOut: "2000", positionClass: "toast-bottom-right"}
                            toastr.info('no new vocabs added')
                        }
                        this.load(1)
                    })
                },
                toggleAllChinese(){
                    this.showAllChinese = !this.showAllChinese
                    this.vocabs.forEach(
                        v => v.showChinese = this.showAllChinese
                    )
                },
                toggleNote(v, index){
                    v.showNote = !v.showNote
                    let note = $('#collapse-'+index).children(":first").html()
                    if (note == '' && v.language == "English"){  //if note is empty
                        toastr.options = { timeOut: "2000",}
                        toastr.info('Looking up Note')
                        const sourceText = v.text                    
                        fetch(`../../api/vocab/dict/${sourceText}`)
                        .then(response => response.json())
                        .then(response => {
                            const result = response.e + '<br>' + response.s  + '<br>' + response.t                    
                            $('#collapse-'+index).children(":first").html(result)
                            app.vocabs[index].note = result
                            // save to database
                            const vocab = {
                                VocabId: v.vocabId,
                                Language: v.language,
                                Text:v.text,
                                Chinese:v.chinese,
                                Note:result,
                                EssayId: v.essayId,
                                Category:v.category,
                                UserId:v.userId,
                            }
                            fetch('./api/vocab',{
                                method: 'PUT', 
                                headers: {
                                'Content-Type': 'application/json',
                                },
                                body: JSON.stringify(vocab),
                            })
                            .then(response => {
                                // toggle
                                $('#collapse-'+index).collapse('toggle')
                            })
                        })
                    }else{
                        $('#collapse-'+index).collapse('toggle')
                    }

                },
                goMCQ(){
                    const language = this.currentLanguage == "Choose..." ? "" : this.currentLanguage 
                    location.href= `./Reviews/mcq/?Language=${language}&CurrentPage=${this.currentPage}&PageSize=${this.pageSize}`                  
                },
                goMatch(){
                    const language = this.currentLanguage == "Choose..." ? "" : this.currentLanguage 
                    location.href= `./Reviews/match/?Language=${language}&CurrentPage=${this.currentPage}&PageSize=${this.pageSize}`                  
                },
                updating(v){
                    this.vocab = {...v}
                    this.editNote = false
                    this.isThisReview = v.isReview
                    $('#modal').modal('show')
                },
                upsert(){
                    let operation = 'POST'
                    // first letter convert to capital letter
                    const vocab = {
                        Language: this.vocab.language,
                        Text:this.vocab.text.trim(),
                        Chinese:this.vocab.chinese,
                        Note:this.vocab.note,                
                        EssayId: this.vocab.essayId,
                        Category:this.vocab.category,
                        UserId:this.vocab.userId,
                    }
                    if (this.vocab.vocabId){
                        vocab.VocabId = this.vocab.vocabId
                        operation = 'PUT'
                    }
                    fetch('./api/vocab',{
                        method: operation, 
                        headers: {
                        'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(vocab),
                    })
                    .then(response => response.json())
                    .then(response => {
                        this.vocab = {...this.defaultVocab}
                        this.isThisReview = false
                        this.vocab.language = this.filterLanguage
                        if(operation == "POST"){   // add new
                            this.load(this.totalPages) // reload last page
                        }else{  // update
                            this.load(this.currentPage)
                        }
                        $('#text').focus()

                        // add to review if yes
                        if (this.addToReview){
                            this.review(response.vocabId, -1) 
                        }
                        // $('#modal').modal('hide')
                    })
                },
                translate(){
                    const sourceText = this.vocab.text                    
                    fetch(`./api/vocab/translate/${sourceText}`)
                    .then(response => response.json())
                    .then(response => {
                        const obj = JSON.parse(response);
                        const result = obj.data.translations[0].translatedText
                        this.vocab.chinese = result                        
                    })
                },
                dict(){
                    // for English word only
                    const sourceText = this.vocab.text                    
                    fetch(`../../api/vocab/dict/${sourceText}`)
                    .then(response => response.json())
                    .then(response => {
                        this.vocab.note = response.e + '<br>' + response.s  + '<br>' + response.t                    
                    })
                },
                unreview(reviewId){
                    fetch('../../api/review/' + reviewId, {
                        method: 'DELETE',          
                    })
                    .then(response => {
                        this.load(this.currentPage)                       
                    })
          
                },
                toggleSelectAll(){
                    this.selectedReviewIds = [];
                    if (!this.allSelected) {
                        for (index in this.vocabs) {
                            this.selectedReviewIds.push(this.vocabs[index].reviewId);
                        }
                        this.allSelected = true
                    }
                },
                unreviewSelected(){
                    if (this.selectedReviewIds.length == 0){
                        alert("nothing selected")
                        return
                    }
                    fetch('../../api/review/bulk',{
                        method: 'DELETE', 
                        headers: {
                        'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(this.selectedReviewIds),
                    })
                    .then(response => {
                        this.load(this.currentPage) 
                        this.allSelected = false
                    })
                },
                openSettingDialog(){
                    fetch('./api/review/setting?language=' + this.filterLanguage)
                    .then(response => response.json())
                    .then(response => {
                        this.reviewSetting = response.data                         
                        $('#modalSetting').modal('show')
                    })
                },
                closeSettingDialog(){
                    $('#modalSetting').modal('hide')
                },
                updateSetting(){
                    fetch('./api/review/setting',{
                        method: 'PUT', 
                        headers: {
                        'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(this.reviewSetting),
                    })
                    .then(response => response.json())
                    .then(response => {
                        $('#modalSetting').modal('hide')
                    })
                }
            }
        })



    </script>
}



